name: Build Flutter Release App Bundle

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    environment: staging # Beibehalten, falls Secrets hier definiert sind

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Check Flutter Doctor
        run: flutter doctor -v

      # --- Release Build Schritte ---
      - name: Decode Release Keystore
        env:
          KEYSTORE_BASE64_SECRET: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo "Decoding keystore for release build..."
          # Dekodiere den Secret-Inhalt und schreibe ihn direkt ins richtige Verzeichnis
          echo $KEYSTORE_BASE64_SECRET | base64 --decode > android/app/release.keystore
          echo "Keystore decoded successfully."

      - name: Verify Decoded Keystore File
        run: |
          echo "Verifying decoded keystore file..."
          if [ ! -f android/app/release.keystore ]; then
             echo "::error::Keystore file (android/app/release.keystore) was not created!"
             exit 1
          fi
          SIZE=$(stat -c%s android/app/release.keystore)
          if [ "$SIZE" -eq 0 ]; then
            echo "::error::Keystore file is empty after decoding. Check the content of the ANDROID_KEYSTORE_BASE64 secret."
            exit 1
          fi
          echo "Keystore file size check passed ($SIZE bytes)."

      # ðŸ”¹ App Bundle (Release) erstellen
      - name: Build Release App Bundle with Direct Credentials
        env:
          # Mappe die Secrets zu den Gradle Environment Variables
          ORG_GRADLE_PROJECT_android.signing.storeFile: release.keystore
          ORG_GRADLE_PROJECT_android.signing.storePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ORG_GRADLE_PROJECT_android.signing.keyAlias: ${{ secrets.ANDROID_KEY_ALIAS }}
          ORG_GRADLE_PROJECT_android.signing.keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          echo "Starting release appbundle build using direct credentials..."
          flutter build appbundle --release
          echo "Build command finished."

      # ðŸ”¹ App Bundle als Artifact hochladen
      - name: Upload App Bundle Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Work-Time-Manager-Release
          path: build/app/outputs/bundle/release/app-release.aab
          if-no-files-found: error
          retention-days: 7

      # ðŸ”¹ App Bundle in den Google Play Store hochladen
      - name: Upload to Google Play
        if: github.ref == 'refs/heads/main' # Nur ausfÃ¼hren, wenn auf dem main-Branch gebaut wird
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_JSON_KEY }}
          packageName: app.work_time_manager
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: internal
          status: draft
